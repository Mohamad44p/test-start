generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Safeguard {
  id                 String   @id @default(cuid())
  domain             String
  title_en           String
  title_ar           String
  tagline_en         String
  tagline_ar         String
  description_en     String   @db.Text
  description_ar     String   @db.Text
  longDescription_en String?  @db.Text
  longDescription_ar String?  @db.Text
  bgColor            String   @default("#f3f4f6")
  attachmentUrl      String?
  imageUrl           String?
  order              Int      @default(0)
  status             String   @default("DRAFT")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([order])
  @@map("safeguards")
}

model aboutus {
  id            String   @id
  titleEn       String
  titleAr       String
  descriptionEn String   @db.Text
  descriptionAr String   @db.Text
  imageUrl      String?
  card1Visible  Boolean  @default(true)
  card2Visible  Boolean  @default(true)
  card3Visible  Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  card          card[]
}

model beneficiary {
  id                 String   @id
  title_en           String
  title_ar           String
  description_en     String
  description_ar     String
  longDescription_en String   @db.Text
  longDescription_ar String   @db.Text
  imageUrl           String
  ctaText            String
  ctaLink            String
  categoryId         String
  createdAt          DateTime @default(now())
  updatedAt          DateTime
  category           category @relation(fields: [categoryId], references: [id], map: "Beneficiary_categoryId_fkey")

  @@index([categoryId], map: "Beneficiary_categoryId_fkey")
}

model card {
  id            String  @id
  titleEn       String?
  titleAr       String?
  descriptionEn String?
  descriptionAr String?
  icon          String?
  aboutUsId     String
  aboutus       aboutus @relation(fields: [aboutUsId], references: [id], onDelete: Cascade, map: "Card_aboutUsId_fkey")

  @@index([aboutUsId], map: "Card_aboutUsId_fkey")
}

model category {
  id          String        @id
  name_en     String
  name_ar     String
  slug        String        @unique(map: "Category_slug_key")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  beneficiary beneficiary[]
}

model complaint {
  id                      String                @id
  complaintNumber         String                @unique(map: "Complaint_complaintNumber_key")
  type                    String
  status                  String                @default("PENDING")
  submittedAt             DateTime              @default(now())
  updatedAt               DateTime
  complainantType         String?
  complainantName         String?
  complainantGender       String?
  complainantEmail        String?
  complainantPhone        String?
  firmName                String?
  firmEmail               String?
  firmPhone               String?
  description             String                @db.Text
  entityAgainst           String
  filedInCourt            Boolean
  hasPreviousComplaint    Boolean
  previousComplaintEntity String?
  previousComplaintDate   DateTime?
  facts                   String                @db.Text
  confirmed               Boolean
  complaintattachment     complaintattachment[]
  complaintnote           complaintnote[]
}

model complaintattachment {
  id          String    @id
  complaintId String
  fileUrl     String
  fileName    String
  fileType    String
  fileSize    Int
  uploadedAt  DateTime  @default(now())
  complaint   complaint @relation(fields: [complaintId], references: [id], map: "ComplaintAttachment_complaintId_fkey")

  @@index([complaintId], map: "ComplaintAttachment_complaintId_idx")
}

model complaintnote {
  id          String    @id
  complaintId String
  authorName  String
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  complaint   complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade, map: "ComplaintNote_complaintId_fkey")

  @@index([complaintId], map: "ComplaintNote_complaintId_idx")
}

model contactsubmission {
  id        String   @id
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("new")
  createdAt DateTime @default(now())
}

model faqcategory {
  id            String         @id
  nameEn        String
  nameAr        String
  slug          String         @unique(map: "FaqCategory_slug_key")
  order         Int            @default(0)
  programId     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  programspages programspages? @relation(fields: [programId], references: [id], map: "FaqCategory_programId_fkey")
  faqitem       faqitem[]

  @@index([order], map: "FaqCategory_order_idx")
  @@index([programId], map: "FaqCategory_programId_idx")
  @@index([slug], map: "FaqCategory_slug_idx")
}

model faqitem {
  id            String         @id
  questionEn    String
  questionAr    String
  answerEn      String         @db.Text
  answerAr      String         @db.Text
  order         Int            @default(0)
  categoryId    String
  programId     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  faqcategory   faqcategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade, map: "FaqItem_categoryId_fkey")
  programspages programspages? @relation(fields: [programId], references: [id], map: "FaqItem_programId_fkey")

  @@index([categoryId], map: "FaqItem_categoryId_idx")
  @@index([order], map: "FaqItem_order_idx")
  @@index([programId], map: "FaqItem_programId_idx")
}

model focusarea {
  id            String          @id
  titleEn       String
  titleAr       String
  descriptionEn String          @default("")
  descriptionAr String          @default("")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  focusareacard focusareacard[]
}

model focusareacard {
  id          String    @id
  titleEn     String
  titleAr     String
  imageUrl    String
  focusareaId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  focusarea   focusarea @relation(fields: [focusareaId], references: [id], onDelete: Cascade, map: "FocusareaCard_focusareaId_fkey")

  @@index([focusareaId], map: "FocusareaCard_focusareaId_fkey")
}

model footer {
  id                String    @id
  techStartTitle_en String    @default("TechStart")
  techStartTitle_ar String    @default("تك ستارت")
  titleColor        String    @default("#1b316e")
  gradientColor     String    @default("#862996")
  instagram         String?
  linkedin          String?
  facebook          String?
  youtube           String?
  twitter           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  partner           partner[]
}

model gallery {
  id        String   @id
  title_en  String
  title_ar  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  image     image[]
}

model herostep {
  id              Int      @id @default(autoincrement())
  title_en        String
  title_ar        String
  tagline_en      String
  tagline_ar      String
  description_en  String
  description_ar  String
  button_title_en String   @default("Get Started")
  button_title_ar String   @default("ابدأ الآن")
  button_link     String   @default("#")
  color           String
  imageUrl        String
  order           Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime

  @@index([order], map: "HeroStep_order_idx")
}

model homebanner {
  id            String   @id
  title_en      String
  title_ar      String
  bgColor       String   @default("#f3f4f6")
  buttonColor   String   @default("#142451")
  imageUrl      String?
  buttonText_en String   @default("Learn More")
  buttonText_ar String   @default("اعرف المزيد")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model image {
  id        String   @id
  url       String
  title_en  String?
  title_ar  String?
  featured  Boolean  @default(false)
  createdAt DateTime @default(now())
  galleryId String
  gallery   gallery  @relation(fields: [galleryId], references: [id], map: "Image_galleryId_fkey")

  @@index([galleryId], map: "Image_galleryId_fkey")
}

model partner {
  id        String       @id
  type      partner_type
  imageUrl  String
  name_en   String
  name_ar   String
  order     Int          @default(0)
  footerId  String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())
  footer    footer       @relation(fields: [footerId], references: [id], map: "Partner_footerId_fkey")

  @@index([footerId], map: "Partner_footerId_fkey")
  @@index([order], map: "Partner_order_idx")
}

model partnerpage {
  id         String           @id
  title_en   String
  title_ar   String
  imageUrl   String
  websiteUrl String
  type       partnerpage_type
  order      Int
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now())
}

model post {
  id             Int      @id @default(autoincrement())
  slug           String   @unique(map: "Post_slug_key")
  type           String
  title_en       String
  title_ar       String
  description_en String?  @db.Text
  description_ar String?  @db.Text
  content_en     String?  @db.Text
  content_ar     String?  @db.Text
  imageUrl       String?
  readTime       String?
  published      Boolean  @default(false)
  featured       Boolean  @default(false)
  authorId       Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  pdfUrl         String?
  tag            tag[]    @relation("posttotag")
}

model program {
  id             String   @id
  name_en        String
  name_ar        String
  description_en String   @db.Text
  description_ar String   @db.Text
  imageUrl       String
  nameColor      String   @default("#1b316e")
  descColor      String   @default("#862996")
  order          Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  @@index([order], map: "Program_order_idx")
}

model programcategory {
  id            String          @id
  name_en       String
  name_ar       String
  order         Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  programspages programspages[]

  @@index([order], map: "ProgramCategory_order_idx")
}

model programshero {
  id                  String         @id
  name                String         @unique(map: "ProgramsHero_name_key")
  tagline_en          String
  tagline_ar          String
  title_en            String
  title_ar            String
  highlightWord_en    String
  highlightWord_ar    String
  description_en      String
  description_ar      String
  imageUrl            String?
  card1Title_en       String?
  card1Title_ar       String?
  card1Icon           String?
  card1Description_en String?
  card1Description_ar String?
  card1Show           Boolean        @default(true)
  card2Title_en       String?
  card2Title_ar       String?
  card2Icon           String?
  card2Description_en String?
  card2Description_ar String?
  card2Show           Boolean        @default(true)
  card3Title_en       String?
  card3Title_ar       String?
  card3Icon           String?
  card3Description_en String?
  card3Description_ar String?
  card3Show           Boolean        @default(true)
  objectives_en       String?        @db.Text
  objectives_ar       String?        @db.Text
  eligibility_en      String?        @db.Text
  eligibility_ar      String?        @db.Text
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @default(now())
  programPageId       String?
  programspages       programspages? @relation(fields: [programPageId], references: [id], map: "ProgramsHero_programPageId_fkey")

  @@index([programPageId], map: "ProgramsHero_programPageId_idx")
}

model programspages {
  id              String           @id
  name_en         String
  name_ar         String
  categoryId      String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
  faqcategory     faqcategory[]
  faqitem         faqitem[]
  programshero    programshero[]
  programcategory programcategory? @relation(fields: [categoryId], references: [id], map: "ProgramsPages_categoryId_fkey")
  programtab      programtab[]

  @@index([categoryId], map: "ProgramsPages_categoryId_idx")
}

model programtab {
  id            String         @id
  title_en      String
  title_ar      String
  slug          String         @unique(map: "ProgramTab_slug_key")
  content_en    String         @db.Text
  content_ar    String         @db.Text
  processFile   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  programPageId String?
  programspages programspages? @relation(fields: [programPageId], references: [id], map: "ProgramTab_programPageId_fkey")
  tabbutton     tabbutton[]

  @@index([programPageId], map: "ProgramTab_programPageId_idx")
}

model stat {
  id        String @id
  name_en   String
  name_ar   String
  value     Float
  icon      String
  suffix_en String @default("total")
  suffix_ar String @default("إجمالي")
}

model tabbutton {
  id         String     @id
  name_en    String
  name_ar    String
  content_en String     @db.Text
  content_ar String     @db.Text
  order      Int        @default(0)
  tabId      String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  programtab programtab @relation(fields: [tabId], references: [id], onDelete: Cascade, map: "TabButton_tabId_fkey")

  @@index([order], map: "TabButton_order_idx")
  @@index([tabId], map: "TabButton_tabId_idx")
}

model tag {
  id      Int    @id @default(autoincrement())
  name_en String
  name_ar String
  slug    String @unique(map: "Tag_slug_key")
  post    post[] @relation("posttotag")
}

model teammember {
  id         String   @id
  nameEn     String
  nameAr     String
  jobTitleEn String
  jobTitleAr String
  imageUrl   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model uploadeditem {
  id        String   @id
  name      String
  url       String
  type      String
  mimeType  String
  size      Int
  createdAt DateTime @default(now())
}

model video {
  id             String       @id
  url            String
  title_en       String
  title_ar       String
  description_en String?      @db.Text
  description_ar String?      @db.Text
  type           video_type   @default(local)
  thumbnail      String?
  featured       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  galleryId      String
  videogallery   videogallery @relation(fields: [galleryId], references: [id], map: "Video_galleryId_fkey")

  @@index([galleryId], map: "Video_galleryId_fkey")
}

model videogallery {
  id        String   @id
  title_en  String
  title_ar  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  video     video[]
}

model workwithus {
  id            String          @id
  type          workwithus_type
  titleEn       String
  titleAr       String
  iconName      String
  descriptionEn String
  descriptionAr String
  tags          String
  deadline      DateTime
  applyLink     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
}

enum workwithus_type {
  Procurement
  Recruitment
}

enum partner_type {
  PROJECT_OF
  FUNDED_BY
  IMPLEMENTED_BY
}

enum partnerpage_type {
  PROJECT_OF
  FUNDED_BY
  IMPLEMENTED_BY
}

enum video_type {
  youtube
  local
  blob
}
